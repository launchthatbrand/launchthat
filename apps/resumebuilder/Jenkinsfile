pipeline {
    agent any

    parameters {
        string(name: 'CLIENT_BRANCH', defaultValue: 'dev', description: 'The branch to push to in the client repository')
    }

    environment {
        // Define environment variables
        APP_NAME = 'resumebuilder'
        APP_DIR = 'apps/resumebuilder'
        // These credentials should be configured in Jenkins
        CLIENT_REPO_CREDS = credentials('jenkins-personal')
        CLIENT_REPO_URL = credentials('RESUMEBUILDER_REPO_URL')
        VERCEL_TOKEN = credentials('VERCEL_TOKEN')
        VERCEL_ORG_ID = credentials('QUCAUSA_VERCEL_ORG_ID') 
        VERCEL_PROJECT_ID = 'resumebuilder'
    }

    stages {
        stage('Check for App Changes') {
            steps {
                script {
                    // Get the list of changed files in this commit
                    def changedFiles = sh(script: "git diff --name-only HEAD~1 HEAD || echo ''", returnStdout: true).trim()
                    
                    // Check if any of the changed files are in the resumebuilder app directory
                    def appChanged = changedFiles.split('\n').any { file -> 
                        file.startsWith('apps/resumebuilder/') 
                    }
                    
                    // Skip remaining stages if app wasn't changed
                    if (!appChanged && !currentBuild.getBuildCauses('UserIdCause')) {
                        echo "No changes detected in ${APP_DIR}. Skipping build."
                        currentBuild.result = 'ABORTED'
                        error("No changes detected in ${APP_DIR}. Build aborted.")
                    } else {
                        echo "Changes detected in ${APP_DIR} or manual build triggered. Proceeding with build."
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                // Checkout the monorepo
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                // Install dependencies but skip postinstall scripts
                sh '''
                pnpm install --filter="@acme/resumebuilder..." --frozen-lockfile --ignore-scripts
                
                # If needed, manually run specific setup scripts that we still want
                # Example: pnpm --filter="@acme/db" generate
                '''
            }
        }
        
 

        stage('Build with Vercel') {
            steps {
                // Build the app using Vercel build via pnpm dlx
                sh '''
                cd ${APP_DIR}
                
                # Create .vercel directory if it doesn't exist
                mkdir -p .vercel
                
                # Create project.json file with project settings
                echo '{"orgId":"'${VERCEL_ORG_ID}'","projectId":"'${VERCEL_PROJECT_ID}'"}' > .vercel/project.json
                
                # Set up Vercel credentials
                echo '{"token":"'${VERCEL_TOKEN}'"}' > .vercel/credentials.json
                
                # Pull Vercel project settings first
                pnpm dlx vercel pull --yes --token ${VERCEL_TOKEN}
                
                # Build the app using pnpm dlx instead of global installation
                pnpm dlx vercel build --yes --token ${VERCEL_TOKEN}
                '''
            }
        }
        
        stage('Deploy to Vercel') {
            steps {
                // Deploy to Vercel using pnpm dlx
                sh '''
                cd ${APP_DIR}
                pnpm dlx vercel deploy --prebuilt --prod --yes --token ${VERCEL_TOKEN}
                '''
            }
        }
        
        stage('Push to Client Repo') {
            steps {
                script {
                    // Set up SSH for Git operations
                    sh '''
                    # Set up a temporary directory
                    TEMP_DIR=$(mktemp -d)
                    
                    # Clone the client repository
                    GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git clone ${CLIENT_REPO_URL} ${TEMP_DIR}
                    
                    # Navigate to the client repo
                    cd ${TEMP_DIR}
                    
                    # Check if the target branch exists
                    if ! git show-ref --verify --quiet refs/remotes/origin/${CLIENT_BRANCH}; then
                        echo "Branch ${CLIENT_BRANCH} doesn't exist, creating it..."
                        
                        # Create the branch from current HEAD
                        git checkout -b ${CLIENT_BRANCH}
                    else
                        # Branch exists, check it out
                        git checkout ${CLIENT_BRANCH} || git checkout -b ${CLIENT_BRANCH} origin/${CLIENT_BRANCH}
                    fi
                    
                    # Clear existing content but keep .git
                    find . -mindepth 1 -maxdepth 1 -not -path "./.git" -exec rm -rf {} \\;
                    
                    # Copy the app source code (excluding .git, node_modules, etc.)
                    rsync -av --exclude='.git' --exclude='node_modules' --exclude='.turbo' ${WORKSPACE}/${APP_DIR}/ ${TEMP_DIR}/
                    
                    # Copy Vercel build output to ensure it's available
                    mkdir -p .vercel
                    rsync -av ${WORKSPACE}/${APP_DIR}/.vercel/output/ .vercel/output/
                    
                    # Create a simple deployment script for the client
                    cat > deploy-to-vercel.sh << 'EOL'
#!/bin/bash
# Script to deploy the pre-built output to Vercel
# Requires Vercel CLI and authentication token

# Check if Vercel CLI is installed
if ! command -v vercel &> /dev/null; then
    echo "Vercel CLI not found. Installing..."
    pnpm install -g vercel
fi

# Deploy the pre-built app
echo "Deploying pre-built app to Vercel..."
vercel deploy --prebuilt --prod

echo "Deployment complete!"
EOL
                    chmod +x deploy-to-vercel.sh
                    
                    # Create a README explaining the deployment process
                    cat > VERCEL_DEPLOYMENT.md << 'EOL'
# Vercel Deployment

This repository contains a pre-built Next.js application ready for deployment to Vercel.

## Deployment Options

### Option 1: Manual Deployment

1. Make sure you have Vercel CLI installed:
   ```
   pnpm install -g vercel
   ```

2. Authenticate with Vercel:
   ```
   vercel login
   ```

3. Run the deployment script:
   ```
   ./deploy-to-vercel.sh
   ```

### Option 2: Vercel Dashboard

1. Connect this repository to Vercel through the Vercel dashboard.
2. Configure the build settings:
   - Framework Preset: Next.js
   - Build Command: Skip the build command, as the app is pre-built
   - Output Directory: .vercel/output

## Important Notes

- The `.vercel/output` directory contains the pre-built application.
- Do not delete this directory as it contains the production-ready build.
- Updates to this repository are pushed automatically from the monorepo build system.
EOL
                    
                    # Add information about the branch
                    echo "
## Branch Information

This code is on the ${CLIENT_BRANCH} branch of the repository." >> VERCEL_DEPLOYMENT.md
                    
                    # Commit and push changes
                    git config user.name "Jenkins CI"
                    git config user.email "jenkins@example.com"
                    git add .
                    git commit -m "Deploy: Pre-built app $(date) to branch ${CLIENT_BRANCH} from monorepo CI" || echo "No changes to commit"
                    
                    # Push to the specified branch
                    GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no" git push origin ${CLIENT_BRANCH}
                    
                    # Clean up
                    cd ${WORKSPACE}
                    rm -rf ${TEMP_DIR}
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "Cleaning workspace after build"
                cleanWs()
            }
        }
        success {
            script {
                echo "Successfully built and deployed ${env.APP_NAME} to Vercel and client repository branch ${params.CLIENT_BRANCH}"
            }
        }
        failure {
            script {
                echo "Failed to build or deploy ${env.APP_NAME}"
            }
        }
    }
} 